% This function takes as input the response coefficient choices, and as
% parameters the boundary conditions and the mechanical properties,
% including the basal stiffness and friction. It returns the 5x5 matrix of
% the coefficients of the homogeneous system, where the fifth mode
% corresponds to the total sliding force balance.


function M = bcmat(response)
%Load parameters
global Sp bc chib kp xitrn xirot

%Define the complex responses
chi  = response(1) + 1i*response(2);
beta = response(3) + 1i*response(4);

%Calculate the four roots to the characteristic polynomial
r=[1 -beta -chi 0 1i*Sp];
k=roots(r);

%Generate matrix for corresponding bc
switch bc
    case 'free-free' 
        M1=[k(1),k(2),k(3),k(4),-chib];
        M2=[(k(1)-beta)*k(1),(k(2)-beta)*k(2),(k(3)-beta)*k(3), ...
            (k(4)-beta)*k(4),-chi];
        M3=[k(1)*exp(k(1)),k(2)*exp(k(2)),k(3)*exp(k(3)),k(4)*exp(k(4)),0];
        M4=[(k(1)^2-chi-beta*k(1))*exp(k(1))+chi,(k(2)^2-chi-beta*k(2))...
            *exp(k(2))+chi,(k(3)^2-chi-beta*k(3))*exp(k(3))+chi,...
            (k(4)^2-chi-beta*k(4))*exp(k(4))+chi,-chi];
        M5=[chi*(exp(k(1))-1)/k(1)+beta*exp(k(1))-(beta+chi),...
            chi*(exp(k(2))-1)/k(2)+beta*exp(k(2))-(beta+chi),...
            chi*(exp(k(3))-1)/k(3)+beta*exp(k(3))-(beta+chi),...
            chi*(exp(k(4))-1)/k(4)+beta*exp(k(4))-(beta+chi),chi+chib];
        M=[M1;M2;M3;M4;M5];
        
    case 'clamped-free' 
        M1=[1,1,1,1,0];
        M2=[k(1)^3-chi*k(1)-beta*k(1)^2,k(2)^3-chi*k(2)-beta*k(2)^2,...
            k(3)^3-chi*k(3)-beta*k(3)^2,k(4)^3-chi*k(4)-beta*k(4)^2,0];
        M3=[k(1)*exp(k(1)),k(2)*exp(k(2)),k(3)*exp(k(3)),k(4)*exp(k(4)),0];
        M4=[(k(1)^2-chi-beta*k(1))*exp(k(1))+chi,(k(2)^2-chi-beta*k(2))...
            *exp(k(2))+chi,(k(3)^2-chi-beta*k(3))*exp(k(3))+chi,...
            (k(4)^2-chi-beta*k(4))*exp(k(4))+chi,-chi];
        M5=[chi*(exp(k(1))-1)/k(1)+beta*exp(k(1))-(beta+chi),...
            chi*(exp(k(2))-1)/k(2)+beta*exp(k(2))-(beta+chi),...
            chi*(exp(k(3))-1)/k(3)+beta*exp(k(3))-(beta+chi),...
            chi*(exp(k(4))-1)/k(4)+beta*exp(k(4))-(beta+chi),chi+chib];
        M=[M1;M2;M3;M4;M5];
        
    case 'pivot-free' 
        M1=[k(1)+kp,k(2)+kp,k(3)+kp,k(4)+kp,-chib];
        M2=[k(1)^3-chi*k(1)-beta*k(1)^2,k(2)^3-chi*k(2)-beta*k(2)^2,...
            k(3)^3-chi*k(3)-beta*k(3)^2,k(4)^3-chi*k(4)-beta*k(4)^2,0];
        M3=[k(1)*exp(k(1)),k(2)*exp(k(2)),k(3)*exp(k(3)),k(4)*exp(k(4)),0];
        M4=[(k(1)^2-chi-beta*k(1))*exp(k(1))+chi,(k(2)^2-chi-beta*k(2))...
            *exp(k(2))+chi,(k(3)^2-chi-beta*k(3))*exp(k(3))+chi,...
            (k(4)^2-chi-beta*k(4))*exp(k(4))+chi,-chi];
        M5=[chi*(exp(k(1))-1)/k(1)+beta*exp(k(1))-(beta+chi),...
            chi*(exp(k(2))-1)/k(2)+beta*exp(k(2))-(beta+chi),...
            chi*(exp(k(3))-1)/k(3)+beta*exp(k(3))-(beta+chi),...
            chi*(exp(k(4))-1)/k(4)+beta*exp(k(4))-(beta+chi),chi+chib];
        M=[M1;M2;M3;M4;M5];
        
    case 'swim-free' 
        M1=[k(1)+xirot,k(2)+xirot,k(3)+xirot,k(4)+xirot,-chib];
        M2=[k(1)^3-chi*k(1)-beta*k(1)^2+xitrn,...
            k(2)^3-chi*k(2)-beta*k(2)^2+xitrn,...
            k(3)^3-chi*k(3)-beta*k(3)^2+xitrn,...
            k(4)^3-chi*k(4)-beta*k(4)^2+xitrn,0];
        M3=[k(1)*exp(k(1)),k(2)*exp(k(2)),k(3)*exp(k(3)),k(4)*exp(k(4)),0];
        M4=[(k(1)^2-chi-beta*k(1))*exp(k(1))+chi,(k(2)^2-chi-beta*k(2))...
            *exp(k(2))+chi,(k(3)^2-chi-beta*k(3))*exp(k(3))+chi,...
            (k(4)^2-chi-beta*k(4))*exp(k(4))+chi,-chi];
        M5=[chi*(exp(k(1))-1)/k(1)+beta*exp(k(1))-(beta+chi),...
            chi*(exp(k(2))-1)/k(2)+beta*exp(k(2))-(beta+chi),...
            chi*(exp(k(3))-1)/k(3)+beta*exp(k(3))-(beta+chi),...
            chi*(exp(k(4))-1)/k(4)+beta*exp(k(4))-(beta+chi),chi+chib];
        M=[M1;M2;M3;M4;M5];
end